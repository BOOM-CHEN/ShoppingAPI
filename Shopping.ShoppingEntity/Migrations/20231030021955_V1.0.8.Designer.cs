// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.ShoppingEntity.Entity;

#nullable disable

namespace Shopping.ShoppingEntity.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20231030021955_V1.0.8")]
    partial class V108
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Carousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_Carousel", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("T_Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e1dcdf1-6694-445f-a791-33fbf1146a4b"),
                            CategoryName = "男装"
                        },
                        new
                        {
                            Id = new Guid("262adbb3-52fa-43c5-afb5-e8602adb6005"),
                            CategoryName = "女装"
                        },
                        new
                        {
                            Id = new Guid("0152e738-329f-43ab-80f0-0f93fbc47f27"),
                            CategoryName = "童装"
                        },
                        new
                        {
                            Id = new Guid("3db17da6-7acf-42b1-b376-da508f4d4985"),
                            CategoryName = "运动装备"
                        },
                        new
                        {
                            Id = new Guid("5deb2416-fa7e-48e1-be63-79112797dc94"),
                            CategoryName = "生鲜食品"
                        },
                        new
                        {
                            Id = new Guid("5eb7fd94-738c-430d-9d1c-be7d894b9a26"),
                            CategoryName = "零食"
                        },
                        new
                        {
                            Id = new Guid("00100bb7-7d2a-4547-b8b0-d5e0d673e833"),
                            CategoryName = "饮料"
                        },
                        new
                        {
                            Id = new Guid("b5349404-de97-4185-8aa6-07734bb0f891"),
                            CategoryName = "调味品"
                        },
                        new
                        {
                            Id = new Guid("4f6059b9-2d00-439e-adeb-98c02c3274c7"),
                            CategoryName = "家具"
                        },
                        new
                        {
                            Id = new Guid("350a2fbc-a11f-4fbc-aa22-6ee27506cb05"),
                            CategoryName = "装饰品"
                        },
                        new
                        {
                            Id = new Guid("a81dafce-4634-4696-99bf-807602230449"),
                            CategoryName = "厨房用具"
                        },
                        new
                        {
                            Id = new Guid("8690dd29-d1cc-410d-9e78-d097c5d7b582"),
                            CategoryName = "手机"
                        },
                        new
                        {
                            Id = new Guid("c0334388-a7c0-4c40-8039-ad5b273311c2"),
                            CategoryName = "电脑"
                        },
                        new
                        {
                            Id = new Guid("b298bc07-02ad-4e72-8aae-3014dcee66f2"),
                            CategoryName = "相机"
                        },
                        new
                        {
                            Id = new Guid("c966899a-a2f1-4cba-96fd-0aa2be4f9743"),
                            CategoryName = "家用电器"
                        },
                        new
                        {
                            Id = new Guid("f5b569c2-5f18-44a7-872f-aa15bc960b5a"),
                            CategoryName = "护肤品"
                        },
                        new
                        {
                            Id = new Guid("5243b771-9bce-4378-8004-ec2ae130d692"),
                            CategoryName = "彩妆"
                        },
                        new
                        {
                            Id = new Guid("3d89c66b-5a83-44a6-b14e-9db336434054"),
                            CategoryName = "香水"
                        },
                        new
                        {
                            Id = new Guid("481a1edd-0491-428c-a5b9-b625a56dc254"),
                            CategoryName = "玩具"
                        },
                        new
                        {
                            Id = new Guid("d87a6609-4516-40fc-b0e2-4d1985f2a6c6"),
                            CategoryName = "学习用具"
                        },
                        new
                        {
                            Id = new Guid("f53f4b0e-9bf1-4bf5-ae9b-c5d2f25eadc5"),
                            CategoryName = "婴儿用品"
                        },
                        new
                        {
                            Id = new Guid("8fcf9f63-9247-47a0-8b5e-42f622c58636"),
                            CategoryName = "小说"
                        },
                        new
                        {
                            Id = new Guid("06850552-050c-48d5-9f25-b2e7aa744c14"),
                            CategoryName = "教育书籍"
                        },
                        new
                        {
                            Id = new Guid("94de0303-9db0-4724-89c4-ccee632aaf24"),
                            CategoryName = "杂志"
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OrderTotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_UserPassword", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("ProductDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInventory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("T_Product", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRecieveAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_User", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("Passwords")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.ShoppingCart", null)
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Passwords");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
