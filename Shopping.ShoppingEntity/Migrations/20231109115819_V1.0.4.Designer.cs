// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.ShoppingEntity.Entity;

#nullable disable

namespace Shopping.ShoppingEntity.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20231109115819_V1.0.4")]
    partial class V104
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Carousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_Carousel", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("T_Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("126cd0e7-f7b1-4ba1-83e0-09f42123a52a"),
                            CategoryName = "男装"
                        },
                        new
                        {
                            Id = new Guid("9cd6fa2c-2b08-49e0-aaeb-ad824221fee6"),
                            CategoryName = "女装"
                        },
                        new
                        {
                            Id = new Guid("69395a90-aed0-4558-8f5e-9ded6c8525df"),
                            CategoryName = "童装"
                        },
                        new
                        {
                            Id = new Guid("697eb7d8-8741-4db3-bdb9-4f0755271df0"),
                            CategoryName = "运动装备"
                        },
                        new
                        {
                            Id = new Guid("d529dd05-2c95-4e4e-96d4-6eddbbca255e"),
                            CategoryName = "生鲜食品"
                        },
                        new
                        {
                            Id = new Guid("e11f6345-ed1f-4e6b-8893-68ac7a3b471d"),
                            CategoryName = "零食"
                        },
                        new
                        {
                            Id = new Guid("41355301-33d1-44b3-a074-af89c5368884"),
                            CategoryName = "饮料"
                        },
                        new
                        {
                            Id = new Guid("76742134-2bf7-48bf-84c5-42550b44e55e"),
                            CategoryName = "调味品"
                        },
                        new
                        {
                            Id = new Guid("c2de93e4-9d7b-4eab-88ce-bbdc34a1faa6"),
                            CategoryName = "家具"
                        },
                        new
                        {
                            Id = new Guid("22a53532-6e46-4aab-9fca-c45496cca106"),
                            CategoryName = "装饰品"
                        },
                        new
                        {
                            Id = new Guid("19ad6597-4346-49d3-b39a-f2dd44490309"),
                            CategoryName = "厨房用具"
                        },
                        new
                        {
                            Id = new Guid("9d5b00f2-bfa9-4c4e-a731-5376e7870296"),
                            CategoryName = "手机"
                        },
                        new
                        {
                            Id = new Guid("db652bfd-5b31-4227-a336-d6f78fd34016"),
                            CategoryName = "电脑"
                        },
                        new
                        {
                            Id = new Guid("5c0e9aaa-b5f1-4bf8-a1bd-331c312f1698"),
                            CategoryName = "相机"
                        },
                        new
                        {
                            Id = new Guid("98d4cefb-797a-4f35-a1e3-e2184edb2c6d"),
                            CategoryName = "家用电器"
                        },
                        new
                        {
                            Id = new Guid("d1de496c-75b9-494d-900f-acce5f707e86"),
                            CategoryName = "护肤品"
                        },
                        new
                        {
                            Id = new Guid("1dde4b92-10bf-4226-96fb-2f9716136a29"),
                            CategoryName = "彩妆"
                        },
                        new
                        {
                            Id = new Guid("8a25e868-9d05-4970-b4f1-00e38bc98369"),
                            CategoryName = "香水"
                        },
                        new
                        {
                            Id = new Guid("860466b0-dd43-4d0c-bab4-9aee1b36daf9"),
                            CategoryName = "玩具"
                        },
                        new
                        {
                            Id = new Guid("6784b5c5-847c-4089-bdba-d9f1956a34e2"),
                            CategoryName = "学习用具"
                        },
                        new
                        {
                            Id = new Guid("8caf3e4e-64d1-4a72-9122-09558eb3d2c7"),
                            CategoryName = "婴儿用品"
                        },
                        new
                        {
                            Id = new Guid("d0fcf605-5557-4bac-861c-55a8bd0ce22e"),
                            CategoryName = "小说"
                        },
                        new
                        {
                            Id = new Guid("18861699-ac27-44bd-aca9-a7eaaf53350c"),
                            CategoryName = "教育书籍"
                        },
                        new
                        {
                            Id = new Guid("1e95fe11-87fc-43a1-b302-1174b86f4726"),
                            CategoryName = "杂志"
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OrderTotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_UserPassword", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("ProductDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInventory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("T_Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("743d208b-256d-434c-9cd2-ee22f7acca1b"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "龙族1",
                            ProductPrice = 99.0
                        },
                        new
                        {
                            Id = new Guid("83b32c80-6e60-49f9-9b39-8c9bb724fa34"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 854,
                            ProductName = "龙族2",
                            ProductPrice = 109.0
                        },
                        new
                        {
                            Id = new Guid("550f3849-7422-48f2-a3ea-aec8b7234940"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 658,
                            ProductName = "龙族3",
                            ProductPrice = 125.0
                        },
                        new
                        {
                            Id = new Guid("4a4659ce-f4b5-4d01-bad6-debe4d9bbfc3"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 356,
                            ProductName = "龙族4",
                            ProductPrice = 169.0
                        },
                        new
                        {
                            Id = new Guid("d09a3a5d-89d9-4391-9890-4eec73c97d38"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 500,
                            ProductName = "龙族5",
                            ProductPrice = 135.0
                        },
                        new
                        {
                            Id = new Guid("973ea450-593c-4749-b906-25e13177917b"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "小米1",
                            ProductPrice = 250.0
                        },
                        new
                        {
                            Id = new Guid("7436c423-ebae-42f9-b54f-a862a6a6e17f"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 655,
                            ProductName = "小米2",
                            ProductPrice = 165.0
                        },
                        new
                        {
                            Id = new Guid("dcf136c7-1e09-412a-a642-180211ecf29d"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 300,
                            ProductName = "联想7000p",
                            ProductPrice = 9555.0
                        },
                        new
                        {
                            Id = new Guid("334c9cf1-79e1-4382-b6fd-f20b38edb9cb"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 19:58:19",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 255,
                            ProductName = "联想y7000p",
                            ProductPrice = 8555.0
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("T_ProductCategory", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRecieveAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_User", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("Passwords")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.ShoppingEntity.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
