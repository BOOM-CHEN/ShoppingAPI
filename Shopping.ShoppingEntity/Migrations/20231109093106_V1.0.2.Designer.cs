// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.ShoppingEntity.Entity;

#nullable disable

namespace Shopping.ShoppingEntity.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20231109093106_V1.0.2")]
    partial class V102
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Carousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_Carousel", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("T_Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22560735-5af0-4437-aa63-072dbb35e82b"),
                            CategoryName = "男装"
                        },
                        new
                        {
                            Id = new Guid("c037325d-dc47-4fdb-8f07-956b728da65e"),
                            CategoryName = "女装"
                        },
                        new
                        {
                            Id = new Guid("218445db-d01d-4884-99dd-6ceff726ff44"),
                            CategoryName = "童装"
                        },
                        new
                        {
                            Id = new Guid("e98cde80-a11c-4e9a-b03f-06aec08bada4"),
                            CategoryName = "运动装备"
                        },
                        new
                        {
                            Id = new Guid("bcfbb528-c357-428a-98f8-9db5e77bb8a5"),
                            CategoryName = "生鲜食品"
                        },
                        new
                        {
                            Id = new Guid("4248824d-879c-4464-a495-f8b0591ba882"),
                            CategoryName = "零食"
                        },
                        new
                        {
                            Id = new Guid("3662d026-b8fc-4468-afa5-b4b64be1698e"),
                            CategoryName = "饮料"
                        },
                        new
                        {
                            Id = new Guid("a6cb0c79-8240-440d-aeb6-452d431a1531"),
                            CategoryName = "调味品"
                        },
                        new
                        {
                            Id = new Guid("f4c838ea-67fb-4e13-a2a0-044cb15daa6c"),
                            CategoryName = "家具"
                        },
                        new
                        {
                            Id = new Guid("28697baa-6573-4a54-a8a1-e8901155faed"),
                            CategoryName = "装饰品"
                        },
                        new
                        {
                            Id = new Guid("908a47a1-b2f6-492f-b604-a42e12ecc7fd"),
                            CategoryName = "厨房用具"
                        },
                        new
                        {
                            Id = new Guid("7895dec2-f012-4f90-8a87-b0b784c8c14b"),
                            CategoryName = "手机"
                        },
                        new
                        {
                            Id = new Guid("2f845cff-9a3b-421c-ac8d-c9bf3a058035"),
                            CategoryName = "电脑"
                        },
                        new
                        {
                            Id = new Guid("6ec6fe5e-9034-46f2-a284-e6d936633f14"),
                            CategoryName = "相机"
                        },
                        new
                        {
                            Id = new Guid("05bb47f3-7cac-4d6a-ab90-c770d936d968"),
                            CategoryName = "家用电器"
                        },
                        new
                        {
                            Id = new Guid("0c6f184a-97d9-4061-a51e-9d9d3325cc8a"),
                            CategoryName = "护肤品"
                        },
                        new
                        {
                            Id = new Guid("9058eed1-7690-4f37-af6e-6c8e190ee245"),
                            CategoryName = "彩妆"
                        },
                        new
                        {
                            Id = new Guid("0fd17238-9fad-4b4b-bb96-7b5619643e3d"),
                            CategoryName = "香水"
                        },
                        new
                        {
                            Id = new Guid("b88d2598-9e0a-4098-9f89-e975e56bed38"),
                            CategoryName = "玩具"
                        },
                        new
                        {
                            Id = new Guid("c000b9b3-899e-4b0f-8649-8d6681d0a15a"),
                            CategoryName = "学习用具"
                        },
                        new
                        {
                            Id = new Guid("fb9d180e-86d9-49b3-b805-10855a7973fb"),
                            CategoryName = "婴儿用品"
                        },
                        new
                        {
                            Id = new Guid("32f0e944-aac3-4d0b-b6dc-fff5a2c930c1"),
                            CategoryName = "小说"
                        },
                        new
                        {
                            Id = new Guid("f81a6e7e-b485-427f-bd76-6169c3405b7c"),
                            CategoryName = "教育书籍"
                        },
                        new
                        {
                            Id = new Guid("cd6e6797-ee25-42c5-84d4-df65c0d2fba1"),
                            CategoryName = "杂志"
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OrderTotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_UserPassword", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("ProductDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInventory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("T_Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("80d17f1a-1594-453a-abbb-8c6c42977af2"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "龙族1",
                            ProductPrice = 99.0
                        },
                        new
                        {
                            Id = new Guid("b4bd90cb-8c8d-4113-abe1-25bb075b24b1"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 854,
                            ProductName = "龙族2",
                            ProductPrice = 109.0
                        },
                        new
                        {
                            Id = new Guid("b829d62e-0e2d-49a9-9c64-7533fa965459"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 658,
                            ProductName = "龙族3",
                            ProductPrice = 125.0
                        },
                        new
                        {
                            Id = new Guid("96b96da8-a6a6-4c5d-a7f1-3ae2c56b8238"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 356,
                            ProductName = "龙族4",
                            ProductPrice = 169.0
                        },
                        new
                        {
                            Id = new Guid("b4efc0bb-de87-4dae-8810-5a29c4cd48b8"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 500,
                            ProductName = "龙族5",
                            ProductPrice = 135.0
                        },
                        new
                        {
                            Id = new Guid("72591916-1c6c-4c64-b953-b1f9026f32e5"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "小米1",
                            ProductPrice = 250.0
                        },
                        new
                        {
                            Id = new Guid("907438b2-401d-4ffc-93ee-c2da0533d83a"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 655,
                            ProductName = "小米2",
                            ProductPrice = 165.0
                        },
                        new
                        {
                            Id = new Guid("a69629cd-9aa9-4347-9681-2eb6e74f1a48"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 300,
                            ProductName = "联想7000p",
                            ProductPrice = 9555.0
                        },
                        new
                        {
                            Id = new Guid("847773cd-f632-4502-897e-c66b68b9856e"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 17:31:06",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 255,
                            ProductName = "联想y7000p",
                            ProductPrice = 8555.0
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("T_ProductCategory", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRecieveAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_User", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("Passwords")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.ShoppingEntity.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Passwords");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
