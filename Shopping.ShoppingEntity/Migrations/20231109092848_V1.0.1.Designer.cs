// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.ShoppingEntity.Entity;

#nullable disable

namespace Shopping.ShoppingEntity.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20231109092848_V1.0.1")]
    partial class V101
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Carousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_Carousel", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("T_Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e056ce9c-942c-4837-88ff-7983e9fa6387"),
                            CategoryName = "男装"
                        },
                        new
                        {
                            Id = new Guid("9a9c04a9-cc7d-4c36-a984-16380ef911ed"),
                            CategoryName = "女装"
                        },
                        new
                        {
                            Id = new Guid("a222a78f-7338-4cc0-b6c2-908e61e09ad0"),
                            CategoryName = "童装"
                        },
                        new
                        {
                            Id = new Guid("61bedeb6-227e-4077-9b59-8fd24b0d7f5e"),
                            CategoryName = "运动装备"
                        },
                        new
                        {
                            Id = new Guid("d1cdf256-299b-4b52-a249-963196ede7cb"),
                            CategoryName = "生鲜食品"
                        },
                        new
                        {
                            Id = new Guid("5242e593-a5c1-4f02-a808-28b5f1b94039"),
                            CategoryName = "零食"
                        },
                        new
                        {
                            Id = new Guid("a2cb0536-9ef1-4121-b02b-64e8188da46f"),
                            CategoryName = "饮料"
                        },
                        new
                        {
                            Id = new Guid("79e115a6-87f4-4091-8abb-3820ce027fa2"),
                            CategoryName = "调味品"
                        },
                        new
                        {
                            Id = new Guid("95dbb072-971d-41a8-97f0-e931d4974c78"),
                            CategoryName = "家具"
                        },
                        new
                        {
                            Id = new Guid("4f50ad19-55a3-4ffe-be8a-af2ff3a2a7d2"),
                            CategoryName = "装饰品"
                        },
                        new
                        {
                            Id = new Guid("b9b87c47-73ff-4a73-b943-ce6aea1fc748"),
                            CategoryName = "厨房用具"
                        },
                        new
                        {
                            Id = new Guid("a53fd49e-252c-41ba-9469-b1b8c9900db8"),
                            CategoryName = "手机"
                        },
                        new
                        {
                            Id = new Guid("e6b7d413-d504-49cc-8cb8-18e1fa2ccf39"),
                            CategoryName = "电脑"
                        },
                        new
                        {
                            Id = new Guid("fe396e62-0a7b-4c68-ab2e-add695e5c7fa"),
                            CategoryName = "相机"
                        },
                        new
                        {
                            Id = new Guid("756b06ac-c9e5-4a75-8aff-4fdf76b3aad4"),
                            CategoryName = "家用电器"
                        },
                        new
                        {
                            Id = new Guid("679ca632-a1e2-4caf-8f2b-c64dd040093d"),
                            CategoryName = "护肤品"
                        },
                        new
                        {
                            Id = new Guid("45ff3e52-c412-455e-aeda-08acba51cdf9"),
                            CategoryName = "彩妆"
                        },
                        new
                        {
                            Id = new Guid("ec9db1dd-01a2-4f3e-a7e9-529a298676e2"),
                            CategoryName = "香水"
                        },
                        new
                        {
                            Id = new Guid("542fc497-a67f-47ae-9bd6-b2ac83ac2de8"),
                            CategoryName = "玩具"
                        },
                        new
                        {
                            Id = new Guid("01ce3fb9-409e-46db-ba97-98cc90be57bc"),
                            CategoryName = "学习用具"
                        },
                        new
                        {
                            Id = new Guid("7ed2485b-63b0-452c-8195-ceeb04b4fe68"),
                            CategoryName = "婴儿用品"
                        },
                        new
                        {
                            Id = new Guid("99751b4c-e64c-4fb0-a162-c3fecc5da638"),
                            CategoryName = "小说"
                        },
                        new
                        {
                            Id = new Guid("0d9197bc-5ac4-4218-97c6-df550a4333ac"),
                            CategoryName = "教育书籍"
                        },
                        new
                        {
                            Id = new Guid("6440189b-8982-4a55-89f0-2145dd49fad5"),
                            CategoryName = "杂志"
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OrderTotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_UserPassword", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("ProductDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInventory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("T_Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("91f9b102-b399-4103-aa8e-e58a081a923d"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "龙族1",
                            ProductPrice = 99.0
                        },
                        new
                        {
                            Id = new Guid("afdcd286-300a-4ab2-a556-796e4f19d318"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 854,
                            ProductName = "龙族2",
                            ProductPrice = 109.0
                        },
                        new
                        {
                            Id = new Guid("c20c7b1f-7936-4ab2-a55d-3da7b1bd5bc6"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 658,
                            ProductName = "龙族3",
                            ProductPrice = 125.0
                        },
                        new
                        {
                            Id = new Guid("c59cef60-36ca-40a6-905a-781450f7e0aa"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 356,
                            ProductName = "龙族4",
                            ProductPrice = 169.0
                        },
                        new
                        {
                            Id = new Guid("ec7d613b-b4d2-4e87-bbd3-c5b340c3dac4"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 500,
                            ProductName = "龙族5",
                            ProductPrice = 135.0
                        },
                        new
                        {
                            Id = new Guid("43b9e9f4-6c05-4efd-b2cf-dd1b68a83d46"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "小米1",
                            ProductPrice = 250.0
                        },
                        new
                        {
                            Id = new Guid("bf5b7b85-5c97-4752-8f03-300c6fb56eac"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 655,
                            ProductName = "小米2",
                            ProductPrice = 165.0
                        },
                        new
                        {
                            Id = new Guid("8b0a37ee-8350-403b-a180-9006f3e672bb"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 300,
                            ProductName = "联想7000p",
                            ProductPrice = 9555.0
                        },
                        new
                        {
                            Id = new Guid("5796e7c5-8519-4d1e-bb9d-2b4372d1127a"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 17:28:48",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 255,
                            ProductName = "联想y7000p",
                            ProductPrice = 8555.0
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("T_ProductCategory", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRecieveAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_User", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("Passwords")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.ShoppingCart", null)
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.ShoppingEntity.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Passwords");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
