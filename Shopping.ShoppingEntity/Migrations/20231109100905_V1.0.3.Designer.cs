// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.ShoppingEntity.Entity;

#nullable disable

namespace Shopping.ShoppingEntity.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20231109100905_V1.0.3")]
    partial class V103
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Carousel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("T_Carousel", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("T_Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7120e59-bd31-4534-a5fe-bc2180a40221"),
                            CategoryName = "男装"
                        },
                        new
                        {
                            Id = new Guid("55c193ba-d4c7-4bd1-aaa6-0be9b6319d55"),
                            CategoryName = "女装"
                        },
                        new
                        {
                            Id = new Guid("fec6ec61-9106-4a6f-bac2-556ccf910cda"),
                            CategoryName = "童装"
                        },
                        new
                        {
                            Id = new Guid("db714759-a935-4789-b4d2-a97881aab342"),
                            CategoryName = "运动装备"
                        },
                        new
                        {
                            Id = new Guid("dfe97f7f-d92a-4845-8b44-b908473f13bf"),
                            CategoryName = "生鲜食品"
                        },
                        new
                        {
                            Id = new Guid("789b95ad-a081-4bf1-8d6a-4f1bbfa8bf3b"),
                            CategoryName = "零食"
                        },
                        new
                        {
                            Id = new Guid("64955edb-150e-4f6d-bb49-38320bf91831"),
                            CategoryName = "饮料"
                        },
                        new
                        {
                            Id = new Guid("a1e3a7dd-e90b-46b1-bca3-02b180002878"),
                            CategoryName = "调味品"
                        },
                        new
                        {
                            Id = new Guid("88f7bc98-e1be-48a6-be1b-fa05851f1fbb"),
                            CategoryName = "家具"
                        },
                        new
                        {
                            Id = new Guid("2a1fbded-27e8-4cb6-a87e-acf00e2a6bb7"),
                            CategoryName = "装饰品"
                        },
                        new
                        {
                            Id = new Guid("20a1f949-791e-4331-8d60-dd97636dc4cc"),
                            CategoryName = "厨房用具"
                        },
                        new
                        {
                            Id = new Guid("901a83b4-ad38-49fe-bb95-820a1b1c1eeb"),
                            CategoryName = "手机"
                        },
                        new
                        {
                            Id = new Guid("522b9f8e-576b-444c-859c-64254777b18c"),
                            CategoryName = "电脑"
                        },
                        new
                        {
                            Id = new Guid("d11bda49-64dd-4149-b165-e6d8b0e4583e"),
                            CategoryName = "相机"
                        },
                        new
                        {
                            Id = new Guid("ba339c4f-407c-48db-bba9-12f6d03a0ced"),
                            CategoryName = "家用电器"
                        },
                        new
                        {
                            Id = new Guid("5e55c5e8-6bc1-4342-83f5-5c1ede76a695"),
                            CategoryName = "护肤品"
                        },
                        new
                        {
                            Id = new Guid("1216d0f1-32b8-46f8-affa-3c0feb76204f"),
                            CategoryName = "彩妆"
                        },
                        new
                        {
                            Id = new Guid("edd55c0b-8aa8-43bf-845e-7e28263ec063"),
                            CategoryName = "香水"
                        },
                        new
                        {
                            Id = new Guid("fa4544bb-4cd7-43d2-9ca5-2478fd39931a"),
                            CategoryName = "玩具"
                        },
                        new
                        {
                            Id = new Guid("1d626b90-02ca-4ddc-b1b0-990d9e3a537a"),
                            CategoryName = "学习用具"
                        },
                        new
                        {
                            Id = new Guid("41378ce3-07e4-4dd0-85e7-aa0185589073"),
                            CategoryName = "婴儿用品"
                        },
                        new
                        {
                            Id = new Guid("0d5b7d58-6edc-4fa8-9794-5a31e0c370f8"),
                            CategoryName = "小说"
                        },
                        new
                        {
                            Id = new Guid("355caab9-bd35-45e6-87b2-4f1c78822cbe"),
                            CategoryName = "教育书籍"
                        },
                        new
                        {
                            Id = new Guid("4ef9a13b-4c3f-4410-a765-63b1eaee8f8d"),
                            CategoryName = "杂志"
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OrderTotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoppingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("T_UserPassword", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<double>("ProductDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInventory")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("T_Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("576cf6ba-2460-487a-95cc-3b265e34e87e"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "龙族1",
                            ProductPrice = 99.0
                        },
                        new
                        {
                            Id = new Guid("64233348-8833-4192-a340-8d4d4eeb051a"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 854,
                            ProductName = "龙族2",
                            ProductPrice = 109.0
                        },
                        new
                        {
                            Id = new Guid("87f71c42-5189-427e-9137-92a82f7a51cd"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 658,
                            ProductName = "龙族3",
                            ProductPrice = 125.0
                        },
                        new
                        {
                            Id = new Guid("2a5ea81a-bceb-4151-9725-de51dacde4f9"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 356,
                            ProductName = "龙族4",
                            ProductPrice = 169.0
                        },
                        new
                        {
                            Id = new Guid("963b62c4-c0d0-4e83-87e0-90f7a8dd3877"),
                            ProductCategory = "小说",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "江南小说",
                            ProductDiscount = 0.0,
                            ProductInventory = 500,
                            ProductName = "龙族5",
                            ProductPrice = 135.0
                        },
                        new
                        {
                            Id = new Guid("b082d8d1-d2d7-491e-9290-ac5f7e70e607"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 925,
                            ProductName = "小米1",
                            ProductPrice = 250.0
                        },
                        new
                        {
                            Id = new Guid("8b6f89fa-b87f-4452-91a4-6e44a5aae781"),
                            ProductCategory = "手机",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "小米手机",
                            ProductDiscount = 0.0,
                            ProductInventory = 655,
                            ProductName = "小米2",
                            ProductPrice = 165.0
                        },
                        new
                        {
                            Id = new Guid("f8692b94-fdb1-42c1-81ed-1b640f81fc2e"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 300,
                            ProductName = "联想7000p",
                            ProductPrice = 9555.0
                        },
                        new
                        {
                            Id = new Guid("59acbd94-d04b-44e9-813d-9b92b33c2046"),
                            ProductCategory = "电脑",
                            ProductDate = "2023-11-09 18:09:05",
                            ProductDescription = "联想系列",
                            ProductDiscount = 0.0,
                            ProductInventory = 255,
                            ProductName = "联想y7000p",
                            ProductPrice = 8555.0
                        });
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("T_ProductCategory", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("T_ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRecieveAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_User", (string)null);
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Order", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Password", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("Passwords")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ProductCategory", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.ShoppingEntity.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.HasOne("Shopping.ShoppingEntity.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Shopping.ShoppingEntity.Models.ShoppingCart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.ShoppingCart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping.ShoppingEntity.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Passwords");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
